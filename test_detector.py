# test_detector.py
import os
import cv2
import time
from detector import ImageDetector
import glob
from pathlib import Path

def test_detector_batch(test_folder_path, output_folder):
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö detector ‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô folder ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    
    Args:
        test_folder_path: ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á folder ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        output_folder: folder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    """
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á detector
    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î detector...")
    detector = ImageDetector({
        'model_path': 'bestMR.pt',
        'use_gpu': True
    })
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á output folder ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    os.makedirs(output_folder, exist_ok=True)
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    roomN_file = os.path.join(output_folder, 'roomN.txt')
    meter_file = os.path.join(output_folder, 'meter.txt')
    meter1_file = os.path.join(output_folder, 'meter1.txt')
    summary_file = os.path.join(output_folder, 'summary.txt')
    
    # ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
    for file_path in [roomN_file, meter_file, meter1_file, summary_file]:
        if os.path.exists(file_path):
            os.remove(file_path)
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.bmp']
    image_files = []
    for ext in image_extensions:
        image_files.extend(glob.glob(os.path.join(test_folder_path, ext)))
        image_files.extend(glob.glob(os.path.join(test_folder_path, ext.upper())))
    
    # ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ set() ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô list
    image_files = list(set(image_files))
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö natural sort (m1, m2, m3, ..., m10, m11)
    import re
    def natural_sort_key(filename):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ö natural"""
        basename = os.path.basename(filename)
        # ‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
        parts = re.split(r'(\d+)', basename)
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô int ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        return [int(part) if part.isdigit() else part for part in parts]
    
    image_files.sort(key=natural_sort_key)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö natural
    
    if not image_files:
        print(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÉ‡∏ô folder: {test_folder_path}")
        return
    
    print(f"‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ {len(image_files)} ‡πÑ‡∏ü‡∏•‡πå")
    print("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö...")
    print("-" * 60)
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    total_files = len(image_files)
    processed_files = 0
    error_files = 0
    total_time = 0
    
    # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    all_roomN_results = []
    all_meter_results = []
    all_meter1_results = []
    summary_results = []
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå (Real-time)
    for i, image_path in enumerate(image_files, 1):
        filename = os.path.basename(image_path)
        print(f"\n[{i}/{total_files}] ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {filename}")
        
        try:
            start_time = time.time()
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û
            img = cv2.imread(image_path)
            if img is None:
                print(f"  ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {filename}")
                error_files += 1
                continue
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏∏‡∏Å bounding box ‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° class
            detections_by_class = detector.get_detections_by_class(img)
            
            room_detections = detections_by_class['roomN']
            meter_detections = detections_by_class['meter']
            decimal_detections = detections_by_class['meter1']
            
            # ‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö summary)
            best_pair = detector.find_best_pairs_unified(detections_by_class)
            
            end_time = time.time()
            process_time = end_time - start_time
            total_time += process_time
            
            print(f"  üìä ‡∏û‡∏ö: ‡∏´‡πâ‡∏≠‡∏á {len(room_detections)}, ‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå {len(meter_detections)}, ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° {len(decimal_detections)}")
            print(f"  ‚è±Ô∏è  ‡πÄ‡∏ß‡∏•‡∏≤: {process_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå roomN ‡πÅ‡∏ö‡∏ö real-time
            if room_detections:
                for j, detection in enumerate(room_detections):
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö m1_1.jpg, m1_2.jpg ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
                    if len(room_detections) > 1:
                        display_name = f"{os.path.splitext(filename)[0]}_{j+1}{os.path.splitext(filename)[1]}"
                    else:
                        display_name = f"{os.path.splitext(filename)[0]}_1{os.path.splitext(filename)[1]}"
                    
                    result_line = f"{display_name} = {detection['number']}"
                    all_roomN_results.append(result_line)
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
                    with open(roomN_file, 'a', encoding='utf-8') as f:
                        f.write(result_line + '\n')
                print(f"  üè† ‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á: {[d['number'] for d in room_detections]}")
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå meter ‡πÅ‡∏ö‡∏ö real-time
            if meter_detections:
                for j, detection in enumerate(meter_detections):
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö m1_1.jpg, m1_2.jpg ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
                    if len(meter_detections) > 1:
                        display_name = f"{os.path.splitext(filename)[0]}_{j+1}{os.path.splitext(filename)[1]}"
                    else:
                        display_name = f"{os.path.splitext(filename)[0]}_1{os.path.splitext(filename)[1]}"
                    
                    result_line = f"{display_name} = {detection['number']}"
                    all_meter_results.append(result_line)
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
                    with open(meter_file, 'a', encoding='utf-8') as f:
                        f.write(result_line + '\n')
                print(f"  üî¢ ‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå: {[d['number'] for d in meter_detections]}")
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå meter1 ‡πÅ‡∏ö‡∏ö real-time
            if decimal_detections:
                for j, detection in enumerate(decimal_detections):
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö m1_1.jpg, m1_2.jpg ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
                    if len(decimal_detections) > 1:
                        display_name = f"{os.path.splitext(filename)[0]}_{j+1}{os.path.splitext(filename)[1]}"
                    else:
                        display_name = f"{os.path.splitext(filename)[0]}_1{os.path.splitext(filename)[1]}"
                    
                    result_line = f"{display_name} = {detection['number']}"
                    all_meter1_results.append(result_line)
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
                    with open(meter1_file, 'a', encoding='utf-8') as f:
                        f.write(result_line + '\n')
                print(f"  üî∏ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°: {[d['number'] for d in decimal_detections]}")
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• summary ‡πÅ‡∏ö‡∏ö real-time
            if best_pair:
                summary_line = f"{filename} = Room: {best_pair['room']['number']}, Meter: {best_pair['meter']['number']}"
                if best_pair['decimal']:
                    summary_line += f", Decimal: {best_pair['decimal']['number']}"
                    summary_line += f", Full: {best_pair['meter']['number']}.{best_pair['decimal']['number']}"
                else:
                    summary_line += f", Full: {best_pair['meter']['number']}"
                summary_line += f" (score: {best_pair['score']:.3f}, distance: {best_pair['distance']:.1f})"
                summary_results.append(summary_line)
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå summary
                with open(summary_file, 'a', encoding='utf-8') as f:
                    f.write(summary_line + '\n')
                print(f"  ‚úÖ ‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ‡∏´‡πâ‡∏≠‡∏á {best_pair['room']['number']}, ‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå {best_pair['meter']['number']}")
            else:
                summary_line = f"{filename} = ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"
                summary_results.append(summary_line)
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå summary
                with open(summary_file, 'a', encoding='utf-8') as f:
                    f.write(summary_line + '\n')
                print(f"  ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
            
            processed_files += 1
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö real-time
            avg_time = total_time / processed_files
            remaining_files = total_files - i
            estimated_time = remaining_files * avg_time
            print(f"  üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {processed_files}/{total_files} ({(processed_files/total_files)*100:.1f}%)")
            print(f"  ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_time:.2f}s, ‡∏Ñ‡∏≤‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {estimated_time:.1f}s")
            
        except Exception as e:
            print(f"  ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            error_files += 1
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    print("\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    print("\n" + "=" * 60)
    print("üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("=" * 60)
    print(f"üìÅ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_files}")
    print(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {processed_files}")
    print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error_files}")
    print(f"‚è±Ô∏è  ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°: {total_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    print(f"üìä ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏£‡∏π‡∏õ: {total_time/max(processed_files, 1):.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    print()
    print(f"üìÑ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á: {len(all_roomN_results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"üìÑ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå: {len(all_meter_results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"üìÑ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°: {len(all_meter1_results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print()
    print(f"üíæ ‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô folder: {output_folder}")
    print(f"   - {roomN_file}")
    print(f"   - {meter_file}")
    print(f"   - {meter1_file}")
    print(f"   - {summary_file}")

def main():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    """
    test_folder = "data-test"
    output_folder="metertest3"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ folder ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not os.path.exists(test_folder):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö folder: {test_folder}")
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á folder ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏á‡πÑ‡∏õ")
        return
    
    print(f"üìÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö folder: {test_folder}")
    print()
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_detector_batch(test_folder,output_folder)

if __name__ == "__main__":
    main()