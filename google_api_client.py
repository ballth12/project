# google_api_client.py - Google API Client ‡πÅ‡∏•‡∏∞ Resource Management
from google.oauth2.credentials import Credentials
from google.oauth2.service_account import Credentials as ServiceAccountCredentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from googleapiclient.errors import HttpError
from flask import session
import os
import time
from google.auth.transport.requests import Request

class GoogleAPIClient:
    """
    ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google API
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö Service Account ‡πÅ‡∏•‡∏∞ OAuth ‡∏û‡∏£‡πâ‡∏≠‡∏° Auto Token Refresh
    """
    
    def __init__(self, credentials_file=None, oauth_credentials=None):
        """
        ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google API Client
        
        Args:
            credentials_file (str, optional): ‡πÑ‡∏ü‡∏•‡πå Service Account credentials
            oauth_credentials (dict, optional): OAuth credentials ‡∏à‡∏≤‡∏Å session
        """
        self.drive_service = None
        self.sheets_service = None
        self.credentials = None
        self.oauth_credentials_dict = oauth_credentials
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ OAuth ‡∏´‡∏£‡∏∑‡∏≠ Service Account
        if oauth_credentials:
            try:
                self.credentials = Credentials(**oauth_credentials)
                self._ensure_valid_credentials()
                self._build_services()
            except Exception as e:
                print(f"Error initializing OAuth credentials: {e}")
                
        elif credentials_file and os.path.exists(credentials_file):
            # ‡πÉ‡∏ä‡πâ Service Account
            try:
                self.credentials = ServiceAccountCredentials.from_service_account_file(
                    credentials_file,
                    scopes=[
                        'https://www.googleapis.com/auth/drive',
                        'https://www.googleapis.com/auth/spreadsheets'
                    ]
                )
                self._build_services()
            except Exception as e:
                print(f"Error initializing Google API Client with Service Account: {e}")
    
    def _ensure_valid_credentials(self):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ credentials ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        """
        if not self.credentials:
            print("‚ùå No credentials found")
            return False
        
        # print(f"üîç Token check - Valid: {self.credentials.valid}")
        # print(f"üîç Token check - Expired: {self.credentials.expired}")
        # print(f"üîç Token check - Expiry: {self.credentials.expiry}")
        # print(f"üîç Token check - Has refresh token: {bool(self.credentials.refresh_token)}")
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ credentials ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if self.credentials.expired and self.credentials.refresh_token:
                print("üîÑ Token is expired, refreshing...")
                self.credentials.refresh(Request())
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï oauth_credentials_dict ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
                if self.oauth_credentials_dict:
                    self.oauth_credentials_dict.update({
                        'token': self.credentials.token,
                        'refresh_token': self.credentials.refresh_token,
                        'token_uri': self.credentials.token_uri,
                        'client_id': self.credentials.client_id,
                        'client_secret': self.credentials.client_secret,
                        'scopes': self.credentials.scopes
                    })
                
                print("Credentials refreshed successfully")
                return True
            elif not self.credentials.valid:
                print("‚ùå Token is invalid but cannot refresh")
                return False
            # else:
            #     print("‚úÖ Token is still valid, no refresh needed")
            
            return True
            
        except Exception as e:
            print(f"Error ensuring valid credentials: {e}")
            return False
    
    def _build_services(self):
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á Google API services
        """
        try:
            if self.credentials:
                self.drive_service = build('drive', 'v3', credentials=self.credentials)
                self.sheets_service = build('sheets', 'v4', credentials=self.credentials)
        except Exception as e:
            print(f"Error building Google API services: {e}")
    
    def _execute_with_retry(self, api_call, max_retries=3):
        """
        Execute API call with automatic retry on auth errors
        
        Args:
            api_call: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
            max_retries: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            
        Returns:
            ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API call ‡∏´‡∏£‡∏∑‡∏≠ raise exception
        """
        for attempt in range(max_retries):
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö credentials ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
                if not self._ensure_valid_credentials():
                    raise Exception("Cannot ensure valid credentials")
                
                # Rebuild services if needed
                if not self.drive_service or not self.sheets_service:
                    self._build_services()
                
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
                return api_call()
                
            except HttpError as http_error:
                status_code = http_error.resp.status
                
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô authorization error (401, 403) ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ token
                if status_code in [401, 403] and attempt < max_retries - 1:
                    print(f"Authorization error (attempt {attempt + 1}): {http_error}")
                    
                    # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ credentials
                    if self.credentials and self.credentials.refresh_token:
                        try:
                            self.credentials.refresh(Request())
                            self._build_services()
                            print("Credentials refreshed, retrying...")
                            continue
                        except Exception as refresh_error:
                            print(f"Failed to refresh credentials: {refresh_error}")
                    
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ raise error
                    if attempt == max_retries - 1:
                        raise Exception(f"Authorization failed after {max_retries} attempts: {http_error}")
                
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ raise ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                else:
                    raise http_error
                    
            except Exception as e:
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà HttpError
                if attempt == max_retries - 1:
                    raise e
                else:
                    print(f"Error in API call (attempt {attempt + 1}): {e}")
                    time.sleep(1)  # ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    
    def upload_to_drive(self, file_path, folder_id, file_name=None):
        """
        ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive ‡∏û‡∏£‡πâ‡∏≠‡∏° Auto Retry
        
        Args:
            file_path (str): ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
            folder_id (str): ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô Google Drive
            file_name (str, optional): ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå)
            
        Returns:
            dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        """
        if not self.drive_service:
            raise Exception("Google Drive Service is not initialized")
        
        def _upload():
            actual_file_name = file_name or os.path.basename(file_path)
            file_metadata = {
                'name': actual_file_name,
                'parents': [folder_id]
            }
            
            media = MediaFileUpload(file_path, resumable=True)
            file = self.drive_service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id, webViewLink'
            ).execute()
            
            return file
        
        return self._execute_with_retry(_upload)
    
    def save_to_sheets(self, spreadsheet_id, values, session_data=None):
        """
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô Google Sheets ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Grid API ‡∏û‡∏£‡πâ‡∏≠‡∏° Auto Retry
        
        Args:
            spreadsheet_id (str): ID ‡∏Ç‡∏≠‡∏á Spreadsheet
            values (list): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            session_data (dict, optional): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏ó‡∏µ‡πà‡∏°‡∏µ data_sheet_id
            
        Returns:
            dict: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        """
        if not self.sheets_service:
            raise Exception("Google Sheets Service is not initialized")
        
        def _save_to_sheets():
            try:
                # 1. ‡∏î‡∏∂‡∏á data_sheet_id ‡∏à‡∏≤‡∏Å session_data ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                data_sheet_id = None
                if session_data:
                    data_sheet_id = session_data.get('data_sheet_id')
                
                # 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ data_sheet_id ‡πÉ‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏µ‡∏ï‡πÄ‡∏≠‡∏á
                if not data_sheet_id:
                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á spreadsheet ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ sheet ID ‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ï‡πÅ‡∏£‡∏Å
                    sheet_metadata = self.sheets_service.spreadsheets().get(
                        spreadsheetId=spreadsheet_id
                    ).execute()
                    
                    # ‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ï‡πÅ‡∏£‡∏Å‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤ data_sheet_id ‡πÑ‡∏î‡πâ
                    if sheet_metadata.get('sheets'):
                        data_sheet_id = sheet_metadata.get('sheets')[0].get('properties', {}).get('sheetId')
                
                # 3. ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A
                result = self.sheets_service.spreadsheets().values().get(
                    spreadsheetId=spreadsheet_id,
                    range="A:A"
                ).execute()
                
                values_list = result.get('values', [])
                next_row = len(values_list) + 1
                
                # 4. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ data_sheet_id ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Grid API (batchUpdate)
                if data_sheet_id:
                    update_body = {
                        "requests": [
                            {
                                "updateCells": {
                                    "start": {
                                        "sheetId": data_sheet_id,
                                        "rowIndex": next_row - 1,  # row indices are 0-based
                                        "columnIndex": 0
                                    },
                                    "rows": [
                                        {
                                            "values": [{"userEnteredValue": {"stringValue": str(value)}} for value in values]
                                        }
                                    ],
                                    "fields": "userEnteredValue"
                                }
                            }
                        ]
                    }
                    
                    result = self.sheets_service.spreadsheets().batchUpdate(
                        spreadsheetId=spreadsheet_id,
                        body=update_body
                    ).execute()
                    
                    return result
                
                # 5. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ data_sheet_id ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ A1 notation
                else:
                    body = {
                        'values': [values]
                    }
                    
                    result = self.sheets_service.spreadsheets().values().update(
                        spreadsheetId=spreadsheet_id,
                        range=f"A{next_row}",
                        valueInputOption='RAW',
                        body=body
                    ).execute()
                    
                    return result
                    
            except Exception as e:
                print(f"Error saving to sheets: {e}")
                raise Exception(f"Failed to save data to sheets: {str(e)}")
        
        return self._execute_with_retry(_save_to_sheets)
    
    def get_file_web_link(self, file_id):
        """
        ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏° Auto Retry
        
        Args:
            file_id (str): ID ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
            
        Returns:
            str: ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå
        """
        if not self.drive_service:
            raise Exception("Google Drive Service is not initialized")
        
        def _get_link():
            file = self.drive_service.files().get(
                fileId=file_id,
                fields='webViewLink'
            ).execute()
            
            return file.get('webViewLink', '')
        
        return self._execute_with_retry(_get_link)
        
    def get_folder_web_link(self, folder_id):
        """
        ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö
        
        Args:
            folder_id (str): ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
            
        Returns:
            str: ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        """
        return f"https://drive.google.com/drive/folders/{folder_id}"
    
    def get_updated_credentials(self):
        """
        ‡∏î‡∏∂‡∏á credentials ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session)
        
        Returns:
            dict: credentials ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
        """
        if self.oauth_credentials_dict and self.credentials:
            return self.oauth_credentials_dict
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö module ‡∏ó‡∏µ‡πà‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏à‡∏≤‡∏Å google_auth.py

def get_drive_service():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Drive service ‡∏à‡∏≤‡∏Å credentials"""
    from google_auth import get_valid_credentials
    
    credentials = get_valid_credentials()
    if not credentials:
        return None
    
    try:
        return build('drive', 'v3', credentials=credentials)
    except Exception as e:
        print(f"Error creating Drive service: {e}")
        return None

def get_sheets_service():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Sheets service ‡∏à‡∏≤‡∏Å credentials"""
    from google_auth import get_valid_credentials
    
    credentials = get_valid_credentials()
    if not credentials:
        return None
    
    try:
        return build('sheets', 'v4', credentials=credentials)
    except Exception as e:
        print(f"Error creating Sheets service: {e}")
        return None

def create_user_resources(user_email):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞ Sheets ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    
    Args:
        user_email (str): ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        
    Returns:
        tuple: (folder_id, sheet_id)
    """
    drive_service = get_drive_service()
    sheets_service = get_sheets_service()
    
    if not drive_service or not sheets_service:
        print("Error: Drive or Sheets service is not initialized")
        return None, None
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå "RoomMeterApp" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try:
        print(f"Searching for RoomMeterApp folder for user {user_email}")
        results = drive_service.files().list(
            q="name='RoomMeterApp' and mimeType='application/vnd.google-apps.folder' and trashed=false",
            spaces='drive',
            fields='files(id, name)'
        ).execute()
        
        folder_id = None
        items = results.get('files', [])
        
        if not items:
            print("Creating new RoomMeterApp folder")
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
            folder_metadata = {
                'name': 'RoomMeterApp',
                'mimeType': 'application/vnd.google-apps.folder'
            }
            folder = drive_service.files().create(body=folder_metadata, fields='id').execute()
            folder_id = folder.get('id')
            print(f"Created folder with ID: {folder_id}")
        else:
            folder_id = items[0]['id']
            print(f"Found existing folder with ID: {folder_id}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå "RoomMeterPhoto" ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô "RoomMeterApp"
        photo_folder_id = None
        print("Searching for RoomMeterPhoto subfolder")
        results = drive_service.files().list(
            q=f"name='RoomMeterPhoto' and mimeType='application/vnd.google-apps.folder' and '{folder_id}' in parents and trashed=false",
            spaces='drive',
            fields='files(id, name)'
        ).execute()
        
        items = results.get('files', [])
        
        if not items:
            print("Creating new RoomMeterPhoto subfolder")
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡∏°‡πà
            photo_folder_metadata = {
                'name': 'RoomMeterPhoto',
                'mimeType': 'application/vnd.google-apps.folder',
                'parents': [folder_id]
            }
            photo_folder = drive_service.files().create(body=photo_folder_metadata, fields='id').execute()
            photo_folder_id = photo_folder.get('id')
            print(f"Created photo folder with ID: {photo_folder_id}")
        else:
            photo_folder_id = items[0]['id']
            print(f"Found existing photo folder with ID: {photo_folder_id}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Sheets "RoomMeterData" ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        sheet_id = None
        print("Searching for RoomMeterData spreadsheet")
        results = drive_service.files().list(
            q=f"name='RoomMeterData' and mimeType='application/vnd.google-apps.spreadsheet' and '{folder_id}' in parents and trashed=false",
            spaces='drive',
            fields='files(id, name)'
        ).execute()
        
        items = results.get('files', [])
        
        if not items:
            print("Creating new RoomMeterData spreadsheet")
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Sheets ‡πÉ‡∏´‡∏°‡πà
            sheet_metadata = {
                'name': 'RoomMeterData',
                'mimeType': 'application/vnd.google-apps.spreadsheet',
                'parents': [folder_id]
            }
            sheet = drive_service.files().create(body=sheet_metadata, fields='id').execute()
            sheet_id = sheet.get('id')
            print(f"Created spreadsheet with ID: {sheet_id}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            body = {
                'requests': [
                    {
                        'addSheet': {
                            'properties': {
                                'title': 'Data',
                                'index': 0
                            }
                        }
                    }
                ]
            }
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏µ‡∏ó‡πÉ‡∏´‡∏°‡πà
            sheets_service.spreadsheets().batchUpdate(
                spreadsheetId=sheet_id,
                body=body
            ).execute()
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏µ‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö sheet ID
            sheet_metadata = sheets_service.spreadsheets().get(
                spreadsheetId=sheet_id
            ).execute()
            
            # ‡πÄ‡∏Å‡πá‡∏ö sheet ID ‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ï Data
            data_sheet_id = None
            for sheet in sheet_metadata.get('sheets', []):
                if sheet.get('properties', {}).get('title') == 'Data':
                    data_sheet_id = sheet.get('properties', {}).get('sheetId')
                    break
            
            # ‡πÄ‡∏Å‡πá‡∏ö sheet ID ‡∏•‡∏á‡πÉ‡∏ô session
            if data_sheet_id is not None:
                session['data_sheet_id'] = data_sheet_id
                print(f"Saved Data sheet ID: {data_sheet_id}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            try:
                print("Adding header row to spreadsheet")
                headers = [['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤', '‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á', '‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå', 
                          '‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°', '‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ï‡πá‡∏°', '‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û']]
                
                # ‡πÉ‡∏ä‡πâ Range ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô A1 notation ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ sheet name
                sheets_service.spreadsheets().values().update(
                    spreadsheetId=sheet_id,
                    range="Data!A1:I1",
                    valueInputOption='RAW',
                    body={'values': headers}
                ).execute()
                print("Successfully added header row")
            except Exception as header_error:
                print(f"Error adding header row: {header_error}")

        else:
            sheet_id = items[0]['id']
            print(f"Found existing spreadsheet with ID: {sheet_id}")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏µ‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö sheet ID
            sheet_metadata = sheets_service.spreadsheets().get(
                spreadsheetId=sheet_id
            ).execute()
            
            # ‡πÄ‡∏Å‡πá‡∏ö sheet ID ‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ï‡πÅ‡∏£‡∏Å (‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ï‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£)
            data_sheet_id = None
            for sheet in sheet_metadata.get('sheets', []):
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡∏µ‡∏ï‡∏ä‡∏∑‡πà‡∏≠ Data ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ï‡∏ô‡∏±‡πâ‡∏ô
                if sheet.get('properties', {}).get('title') == 'Data':
                    data_sheet_id = sheet.get('properties', {}).get('sheetId')
                    break
                
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏µ‡∏ï‡∏ä‡∏∑‡πà‡∏≠ Data ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ï‡πÅ‡∏£‡∏Å
            if data_sheet_id is None and sheet_metadata.get('sheets'):
                data_sheet_id = sheet_metadata.get('sheets')[0].get('properties', {}).get('sheetId')
            
            # ‡πÄ‡∏Å‡πá‡∏ö sheet ID ‡∏•‡∏á‡πÉ‡∏ô session
            if data_sheet_id is not None:
                session['data_sheet_id'] = data_sheet_id
                print(f"Found and saved Data sheet ID: {data_sheet_id}")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô session
        if 'session' in globals() or 'session' in locals():
            session['folder_id'] = folder_id
            session['photo_folder_id'] = photo_folder_id
            session['sheet_id'] = sheet_id
            print("Saved folder and sheet IDs to session")
        
        return folder_id, sheet_id
        
    except HttpError as http_error:
        print(f"HTTP Error in create_user_resources: {http_error}")
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö authorization ‡πÉ‡∏´‡πâ‡∏•‡∏ö session ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ login ‡πÉ‡∏´‡∏°‡πà
        if http_error.resp.status in [401, 403]:
            print("Authorization error detected, clearing session")
            session.clear()
        return None, None
    except Exception as e:
        print(f"Error in create_user_resources: {e}")
        return None, None